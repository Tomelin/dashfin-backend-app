name: Go CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  issues: write
  packages: write
  attestations: write
  id-token: write

env:
  GO_VERSION: '1.21' # Specify the Go version to use
  DOCKER_REGISTRY: docker.io # Example, adjust if using GHCR or other
  DOCKER_NAMESPACE: yourusername # TODO: Configure this. Example, for Docker Hub, replace with your username/org

jobs:
  # Linting, Testing, Building, Deployment jobs will be defined in subsequent steps
  # This initial structure just sets up the workflow basics.

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest # Or a specific version like v1.55.2
          args: --timeout=5m

  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 7 # Optional: Keep artifacts for 7 days

  build:
    name: Build Application and Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build Go Application
        run: go build -v -o myapp ./... # Assumes outputting a binary named 'myapp'

      - name: Log in to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only login when pushing to main
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/myapp

      - name: Build and Push Docker Image (Main Branch) / Build and Load (Pull Request)
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile # Explicitly state Dockerfile location
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Cache settings can be added here if desired, e.g.
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

  security-scan:
    name: Security Vulnerability Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    # Run on push to main (image is pushed) or on PRs (image is built locally)
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Note: This job assumes the 'build' job for pull_request events will make the Docker image
      # available to the local Docker daemon (e.g., using 'load: true' in docker/build-push-action).
      # If not, Trivy might not find the image when running on a PR.
      # The image tag includes github.sha, which should be consistent with the build job.
      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master # Or pin to a specific version like @0.18.0
        with:
          image-ref: '${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/myapp:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH' # Comma-separated list of severities to scan for
          exit-code: '1'          # Fail if vulnerabilities of specified severity are found

      - name: Upload Trivy scan results
        if: always() # Upload results even if the scan fails (due to vulnerabilities found)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.sarif
          retention-days: 7

      - name: Upload SARIF to GitHub Security tab
        # Run if the trivy-results.sarif file exists, which it should if trivy ran.
        # The previous step (Trivy scan) might fail due to vulnerabilities (exit-code: 1),
        # but the SARIF file should still be generated.
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'myapp-docker-image' # A category for the scan

  generate-docs:
    name: Generate Go Documentation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install godoc
        run: go install golang.org/x/tools/cmd/godoc@latest # Ensures godoc is available

      - name: Generate GoDoc HTML
        run: |
          # Ensure GOPATH/bin is in PATH for godoc if installed via go install
          export PATH=$(go env GOPATH)/bin:$PATH
          godoc -html ./... > godocs.html

      - name: Upload GoDocs HTML
        uses: actions/upload-artifact@v4
        with:
          name: godoc-html
          path: godocs.html
          retention-days: 7

  gemini-review:
    name: Gemini Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for tj-actions/changed-files to work correctly
          token: ${{ secrets.GITHUB_TOKEN }} # Or specific PAT if scripts need more permissions

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or the version your scripts require

      - name: Get changed Go files
        id: get_changed_files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **.go
          files_ignore: |
            **_test.go
            **/testdata/**
            **/vendor/**
            **/mocks/**

      - name: Run Gemini Analysis
        if: steps.get_changed_files.outputs.any_changed == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_CONTEXT: "Repository: ${{ github.repository }}. Pull Request: #${{ github.event.pull_request.number }}. Commit: ${{ github.sha }}. Changed Files: ${{ steps.get_changed_files.outputs.all_changed_files }}"
          MAX_PROMPT_LENGTH_KB: "15" # Example: 15KB, adjust as needed
          MAX_TOKENS_PER_FILE: "8000" # Example, adjust based on Gemini model and typical file size
          GEMINI_MODEL: "gemini-1.5-flash-latest" # Or your preferred model
        run: node .github/scripts/analyze-gemini-go.js "${{ steps.get_changed_files.outputs.all_changed_files }}"

  claude-review:
    name: Claude Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    needs: test # Can run in parallel with gemini-review
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get changed Go files
        id: get_changed_files_claude # Use a different id if needed, though scope is per job
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **.go
          files_ignore: |
            **_test.go
            **/testdata/**
            **/vendor/**
            **/mocks/**

      - name: Run Claude Analysis
        if: steps.get_changed_files_claude.outputs.any_changed == 'true'
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_CONTEXT: "Repository: ${{ github.repository }}. Pull Request: #${{ github.event.pull_request.number }}. Commit: ${{ github.sha }}. Changed Files: ${{ steps.get_changed_files_claude.outputs.all_changed_files }}"
          MAX_PROMPT_LENGTH_KB: "80" # Example: 80KB for Claude
          MAX_TOKENS_PER_FILE: "8000" # Example
          CLAUDE_MODEL: "claude-3-haiku-20240307" # Or your preferred model
        run: node .github/scripts/analyze-claude-go.js "${{ steps.get_changed_files_claude.outputs.all_changed_files }}"

  ai-review-summary:
    name: AI Review Summary
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request' && github.event.pull_request.draft == false
    needs: [gemini-review, claude-review]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Post AI Review Summary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_FULL_NAME: ${{ github.repository }}
          GEMINI_REVIEW_STATUS: ${{ needs.gemini-review.result }}
          CLAUDE_REVIEW_STATUS: ${{ needs.claude-review.result }}
        run: node .github/scripts/post-summary.js

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: # Optional: define a GitHub environment for 'development'
      name: development
      url: http://dev.example.com # Placeholder URL
    steps:
      - name: Checkout code # May not be needed if only deploying an image
        uses: actions/checkout@v4

      - name: Download Docker image information (if needed)
        # If the build job uploads image name/tag as an artifact, download it here.
        # Alternatively, construct image name using env vars and github.sha.
        run: echo "Image to deploy: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/myapp:${{ github.sha }}"

      - name: Placeholder for Deploy to Development
        env:
          DEV_SERVER_HOST: ${{ secrets.DEV_SERVER_HOST }} # Example secret
          DEV_SERVER_USER: ${{ secrets.DEV_SERVER_USER }} # Example secret
          # SSH_PRIVATE_KEY_DEV: ${{ secrets.SSH_PRIVATE_KEY_DEV }} # Example secret
        run: |
          echo "Deploying to Development server: $DEV_SERVER_HOST as $DEV_SERVER_USER..."
          echo "Using image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/myapp:${{ github.sha }}"
          echo "---"
          echo "Actual deployment commands would go here."
          echo "For example, using ssh:"
          echo "ssh -i path/to/private_key $DEV_SERVER_USER@$DEV_SERVER_HOST 'docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/myapp:${{ github.sha }} && docker run ...'"
          echo "Or using kubectl:"
          echo "kubectl set image deployment/myapp-deployment myapp=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/myapp:${{ github.sha }} -n development"
          echo "---"
          # Add actual deployment script/commands here
          # Ensure necessary secrets (DEV_SERVER_HOST, DEV_SERVER_USER, SSH_PRIVATE_KEY_DEV, KUBE_CONFIG_DEV etc.)
          # are configured in GitHub repository/organization secrets and mapped to the 'development' environment.

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-dev # Depends on successful deployment to development
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: http://your-production-app-url.com # Placeholder
    steps:
      - name: Checkout code # May not be needed
        uses: actions/checkout@v4

      - name: Download Docker image information (if needed)
        run: echo "Image to deploy to Production: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/myapp:${{ github.sha }}"

      - name: Placeholder for Deploy to Production
        env:
          PROD_SERVER_HOST: ${{ secrets.PROD_SERVER_HOST }} # Example secret
          PROD_SERVER_USER: ${{ secrets.PROD_SERVER_USER }} # Example secret
          # SSH_PRIVATE_KEY_PROD: ${{ secrets.SSH_PRIVATE_KEY_PROD }} # Example secret
        run: |
          echo "DEPLOYING TO PRODUCTION SERVER: $PROD_SERVER_HOST as $PROD_SERVER_USER..."
          echo "Using image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/myapp:${{ github.sha }}"
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "!!!                 WARNING: PRODUCTION DEPLOYMENT           !!!"
          echo "!!! Ensure all tests and approvals are completed before this.!!!"
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "---"
          echo "Actual production deployment commands would go here."
          echo "These should be robust and potentially include health checks post-deployment."
          echo "e.g., ssh -i path/to/prod_private_key $PROD_SERVER_USER@$PROD_SERVER_HOST 'docker pull ... && docker run ...'"
          echo "or kubectl apply -f prod-deployment.yml -n production"
          echo "---"
          # Add actual deployment script/commands here
          # Ensure necessary secrets (PROD_SERVER_HOST, PROD_SERVER_USER, SSH_PRIVATE_KEY_PROD, KUBE_CONFIG_PROD etc.)
          # are configured in GitHub repository/organization secrets and mapped to the 'production' environment.

  notify:
    name: Send Workflow Notification
    runs-on: ubuntu-latest
    if: always() # Ensures this job runs regardless of previous job failures
    needs: [lint, test, build, security-scan, generate-docs, gemini-review, claude-review, ai-review-summary, deploy-dev, deploy-prod] # Wait for all main jobs
    steps:
      - name: Check Job Statuses and Send Notification
        run: |
          echo "Workflow Name: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Actor: ${{ github.actor }}"
          echo "Branch/Ref: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "---"
          echo "Job Statuses:"
          echo "  Lint: ${{ needs.lint.result }}"
          echo "  Test: ${{ needs.test.result }}"
          echo "  Build: ${{ needs.build.result }}"
          echo "  Security Scan: ${{ needs.security-scan.result }}"
          echo "  Generate Docs: ${{ needs.generate-docs.result }}"
          echo "  Gemini Review: ${{ needs.gemini-review.result }}"
          echo "  Claude Review: ${{ needs.claude-review.result }}"
          echo "  AI Review Summary: ${{ needs.ai-review-summary.result }}"
          echo "  Deploy Dev: ${{ needs.deploy-dev.result }}"
          echo "  Deploy Prod: ${{ needs.deploy-prod.result }}"
          echo "---"

          # Determine overall status
          # Note: ${{ job.status }} would give the status of THIS 'notify' job if used directly.
          # We are interested in the overall status derived from previous jobs.
          # A simple check: if any of the 'needs' failed, then it's a failure.
          # For more complex logic, a script might be needed.

          overall_status="SUCCESS"
          # Check for failures
          if [[ "${{ needs.lint.result }}" == "failure" || \
                "${{ needs.test.result }}" == "failure" || \
                "${{ needs.build.result }}" == "failure" || \
                "${{ needs.security-scan.result }}" == "failure" || \
                "${{ needs.generate-docs.result }}" == "failure" || \
                "${{ needs.gemini-review.result }}" == "failure" || \
                "${{ needs.claude-review.result }}" == "failure" || \
                "${{ needs.ai-review-summary.result }}" == "failure" || \
                # deploy-dev and deploy-prod results are only critical if they were supposed to run (i.e., on push to main)
                # For PRs, their skipped status is fine.
                # However, a simple check for failure is okay for now.
                # A more nuanced check might consider github.event_name
                "${{ needs.deploy-dev.result }}" == "failure" || \
                "${{ needs.deploy-prod.result }}" == "failure" ]]; then
            overall_status="FAILURE"
          # Check for cancellations if no primary failure
          elif [[ "${{ needs.lint.result }}" == "cancelled" || \
                  "${{ needs.test.result }}" == "cancelled" || \
                  "${{ needs.build.result }}" == "cancelled" || \
                  "${{ needs.security-scan.result }}" == "cancelled" || \
                  "${{ needs.generate-docs.result }}" == "cancelled" || \
                  "${{ needs.gemini-review.result }}" == "cancelled" || \
                  "${{ needs.claude-review.result }}" == "cancelled" || \
                  "${{ needs.ai-review-summary.result }}" == "cancelled" || \
                  "${{ needs.deploy-dev.result }}" == "cancelled" || \
                  "${{ needs.deploy-prod.result }}" == "cancelled" ]]; then
            overall_status="CANCELLED"
          fi

          echo "Overall Workflow Status: $overall_status"
          echo "---"
          echo "Placeholder for sending notification to Slack, Teams, Email, etc."
          echo "For example, using a Slack action:"
          echo "# - name: Send Slack Notification"
          echo "#   uses: slackapi/slack-github-action@v1.24.0" # Example action
          echo "#   with:"
          echo "#     channel-id: 'YOUR_SLACK_CHANNEL_ID'"
          echo "#     slack-message: 'Workflow *${{ github.workflow }}* result: ($overall_status) for commit ${{ github.sha }} on ${{ github.ref }}. Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'"
          echo "#   env:"
          echo "#     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}"

          # If overall_status is FAILURE, you might want to exit with an error
          # to make the 'notify' job itself reflect the failure.
          if [[ "$overall_status" == "FAILURE" ]]; then
            # exit 1 # Uncomment if 'notify' job should also fail.
            echo "Exiting with status 0 to allow workflow to complete with overall failure status reflected in logs."
          fi
