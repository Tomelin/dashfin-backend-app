name: Go AI Code Review

on:
  pull_request:
    branches:
      - "*"
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - "Dockerfile"
      - "docker-compose.yml"
      - "Makefile"

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  gemini_go_review:
    name: Gemini Go Code Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Get changed Go files
        id: changed_files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.go
            go.mod
            go.sum
            Dockerfile
            docker-compose.yml
            Makefile
          separator: ","

      - name: Create Gemini Go analysis script
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          cat > analyze-gemini-go.js << 'EOF'
          const fs = require('fs');
          const https = require('https');
          
          async function analyzeGoWithGemini() {
            const changedFiles = process.argv[2].split(',').filter(f => f.trim());
            const prNumber = process.env.PR_NUMBER;
            const repoName = process.env.REPO_FULL_NAME;
            const geminiApiKey = process.env.GEMINI_API_KEY;
            
            if (!geminiApiKey) {
              console.log('GEMINI_API_KEY not found, skipping Gemini review');
              return;
            }
            
            console.log(`Analyzing ${changedFiles.length} changed Go files with Gemini...`);
            
            // Read file contents
            let codeContent = '';
            let fileCount = 0;
            
            for (const file of changedFiles.slice(0, 15)) { // Limit to 15 files for Go
              try {
                if (fs.existsSync(file)) {
                  const content = fs.readFileSync(file, 'utf8');
                  codeContent += `\n\n--- File: ${file} ---\n${content}`;
                  fileCount++;
                }
              } catch (err) {
                console.log(`Error reading ${file}:`, err.message);
              }
            }
            
            if (!codeContent.trim()) {
              console.log('No readable files found for analysis');
              return;
            }
            
            const prompt = `Please review the following Go code changes focusing on:

**🐹 Go Language Specifics:**
- Idiomatic Go patterns and conventions
- Proper error handling with explicit error returns
- Goroutine usage and concurrent programming patterns
- Channel usage and select statements
- Interface design and implementation
- Struct composition vs inheritance patterns
- Package organization and naming conventions

**📦 Go Modules & Dependencies:**
- go.mod and go.sum file changes
- Dependency management best practices
- Version compatibility issues
- Unused dependencies

**🔧 Code Quality:**
- Function and variable naming (camelCase, exported vs unexported)
- Code organization and structure
- Comment quality (especially for exported functions)
- Test coverage and test patterns
- Benchmark tests where applicable

**⚡ Performance & Memory:**
- Memory allocation patterns
- Slice and map usage efficiency
- String manipulation optimization
- Context usage for cancellation and timeouts
- Resource cleanup (defer statements)

**🛡️ Security & Best Practices:**
- Input validation and sanitization
- SQL injection prevention
- Cross-site scripting (XSS) prevention
- Proper use of crypto packages
- File path traversal prevention

**🚀 Standard Library Usage:**
- Effective use of standard library packages
- HTTP handler patterns and middleware
- JSON marshaling/unmarshaling
- Time and date handling
- Regular expressions

**🧪 Testing:**
- Table-driven tests
- Test helper functions
- Mocking and dependency injection
- Integration test patterns
- Error case testing

Files analyzed (${fileCount}):
${codeContent.substring(0, 18000)}`; // Increased limit for Go files
            
            try {
              const response = await callGeminiAPI(prompt, geminiApiKey);
              
              if (response && response.trim()) {
                console.log('Gemini Go analysis completed successfully');
                console.log('Response preview:', response.substring(0, 200) + '...');
                
                await postComment(prNumber, repoName, `## 🐹 Gemini Go Code Review
          
${response}

---
*Analyzed ${fileCount} Go file(s) automatically*`);
              } else {
                console.log('Gemini returned empty response');
              }
            } catch (error) {
              console.error('Gemini analysis failed:', error.message);
              console.error('Error details:', error);
              
              await postComment(prNumber, repoName, `## 🐹 Gemini Go Code Review
          
⚠️ **Analysis Failed**: Unable to complete Gemini Go code review due to an API error.

Please check the workflow logs for more details.

---
*Attempted to analyze ${fileCount} Go file(s)*`);
            }
          }
          
          function callGeminiAPI(prompt, apiKey) {
            return new Promise((resolve, reject) => {
              const data = JSON.stringify({
                contents: [{
                  parts: [{ text: prompt }]
                }],
                generationConfig: {
                  temperature: 0.1,
                  maxOutputTokens: 2048
                }
              });
              
              const options = {
                hostname: 'generativelanguage.googleapis.com',
                path: `/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Content-Length': Buffer.byteLength(data)
                }
              };
              
              const req = https.request(options, (res) => {
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                  try {
                    const result = JSON.parse(body);
                    if (result.candidates && result.candidates[0]) {
                      resolve(result.candidates[0].content.parts[0].text);
                    } else {
                      reject(new Error('Invalid Gemini API response'));
                    }
                  } catch (e) {
                    reject(new Error(`Parse error: ${e.message}`));
                  }
                });
              });
              
              req.on('error', reject);
              req.write(data);
              req.end();
            });
          }
          
          async function postComment(prNumber, repoName, comment) {
            return new Promise((resolve, reject) => {
              if (!prNumber || !repoName || !process.env.GITHUB_TOKEN) {
                console.log('Missing required parameters for posting comment');
                console.log(`PR: ${prNumber}, Repo: ${repoName}, Token: ${process.env.GITHUB_TOKEN ? 'present' : 'missing'}`);
                resolve();
                return;
              }
              
              const data = JSON.stringify({ body: comment });
              
              const options = {
                hostname: 'api.github.com',
                path: `/repos/${repoName}/issues/${prNumber}/comments`,
                method: 'POST',
                headers: {
                  'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                  'Accept': 'application/vnd.github.v3+json',
                  'User-Agent': 'Go-AI-Code-Review-Action',
                  'Content-Type': 'application/json',
                  'Content-Length': Buffer.byteLength(data)
                }
              };
              
              console.log(`Posting comment to: ${options.hostname}${options.path}`);
              
              const req = https.request(options, (res) => {
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    console.log('Comment posted successfully');
                    resolve();
                  } else {
                    console.error(`GitHub API error: ${res.statusCode} - ${body}`);
                    resolve();
                  }
                });
              });
              
              req.on('error', (error) => {
                console.error('Request error:', error.message);
                resolve();
              });
              
              req.write(data);
              req.end();
            });
          }
          
          analyzeGoWithGemini().catch(console.error);
          EOF

      - name: Run Gemini Go analysis
        if: steps.changed_files.outputs.any_changed == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_FULL_NAME: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node analyze-gemini-go.js "${{ steps.changed_files.outputs.all_changed_files }}"

  claude_go_review:
    name: Claude Go Code Review
    runs-on: ubuntu-latest
    needs: gemini_go_review
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Get changed Go files
        id: changed_files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.go
            go.mod
            go.sum
            Dockerfile
            docker-compose.yml
            Makefile
          separator: ","

      - name: Create Claude Go analysis script
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          cat > analyze-claude-go.js << 'EOF'
          const fs = require('fs');
          const https = require('https');
          
          async function analyzeGoWithClaude() {
            const changedFiles = process.argv[2].split(',').filter(f => f.trim());
            const prNumber = process.env.PR_NUMBER;
            const repoName = process.env.REPO_FULL_NAME;
            const claudeApiKey = process.env.CLAUDE_API_KEY;
            
            if (!claudeApiKey) {
              console.log('CLAUDE_API_KEY not found, skipping Claude review');
              return;
            }
            
            console.log(`Analyzing ${changedFiles.length} changed Go files with Claude...`);
            
            // Read file contents
            let codeContent = '';
            let fileCount = 0;
            
            for (const file of changedFiles.slice(0, 15)) { // Limit to 15 files for Go
              try {
                if (fs.existsSync(file)) {
                  const content = fs.readFileSync(file, 'utf8');
                  codeContent += `\n\n--- File: ${file} ---\n${content}`;
                  fileCount++;
                }
              } catch (err) {
                console.log(`Error reading ${file}:`, err.message);
              }
            }
            
            if (!codeContent.trim()) {
              console.log('No readable files found for analysis');
              return;
            }
            
            const prompt = `As an expert Go code reviewer, please analyze the following Go code changes with focus on:

## 🐹 Go Language & Idioms:
1. **Idiomatic Go**: Following Go conventions, effective Go patterns, and community best practices
2. **Error Handling**: Proper error wrapping, custom error types, and error propagation patterns
3. **Concurrency**: Goroutines, channels, select statements, and race condition prevention
4. **Interfaces**: Interface design, implicit implementation, and composition over inheritance
5. **Package Design**: Package organization, exported vs unexported identifiers, and API design

## 🏗️ Code Structure & Architecture:
1. **Function Design**: Single responsibility, appropriate function size, and clear parameter/return patterns
2. **Struct Composition**: Embedding, method sets, and value vs pointer receivers
3. **Context Usage**: Proper context.Context usage for cancellation and request-scoped values
4. **Dependency Injection**: Constructor patterns and dependency management

## ⚡ Performance & Memory:
1. **Memory Efficiency**: Slice capacity management, string builder usage, and memory pooling
2. **Algorithm Efficiency**: Big O complexity and optimization opportunities
3. **Garbage Collection**: Reducing allocations and GC pressure
4. **Profiling Considerations**: CPU and memory profiling opportunities

## 🛡️ Security & Reliability:
1. **Input Validation**: Parameter validation, boundary checks, and sanitization
2. **Resource Management**: Proper cleanup with defer, file/connection handling
3. **Cryptography**: Secure random generation, proper hashing, and encryption usage
4. **SQL Security**: Query parameterization and injection prevention

## 🧪 Testing & Quality:
1. **Test Patterns**: Table-driven tests, test helpers, and test organization
2. **Coverage**: Test completeness and edge case handling
3. **Benchmarks**: Performance testing opportunities
4. **Documentation**: GoDoc comments and code clarity

## 📦 Dependencies & Modules:
1. **Go Modules**: Proper versioning, dependency management, and module organization
2. **Standard Library**: Effective use of stdlib packages vs external dependencies
3. **Third-party Libraries**: Appropriate library choices and version management

Please provide specific, actionable feedback with Go code examples where helpful.

Code to review (${fileCount} files):
${codeContent.substring(0, 22000)}`; // Increased limit for Go files
            
            try {
              const response = await callClaudeAPI(prompt, claudeApiKey);
              
              if (response && response.trim()) {
                console.log('Claude Go analysis completed successfully');
                console.log('Response preview:', response.substring(0, 200) + '...');
                
                await postComment(prNumber, repoName, `## 🧠 Claude Go Code Review

${response}

---
*Analyzed ${fileCount} Go file(s) automatically*`);
              } else {
                console.log('Claude returned empty response');
              }
            } catch (error) {
              console.error('Claude analysis failed:', error.message);
              console.error('Error details:', error);
              
              await postComment(prNumber, repoName, `## 🧠 Claude Go Code Review

⚠️ **Analysis Failed**: Unable to complete Claude Go code review due to an API error.

Please check the workflow logs for more details.

---
*Attempted to analyze ${fileCount} Go file(s)*`);
            }
          }
          
          function callClaudeAPI(prompt, apiKey) {
            return new Promise((resolve, reject) => {
              const data = JSON.stringify({
                model: "claude-sonnet-4-20250514",
                max_tokens: 2048,
                temperature: 0.1,
                messages: [{
                  role: "user",
                  content: prompt
                }]
              });
              
              const options = {
                hostname: 'api.anthropic.com',
                path: '/v1/messages',
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'x-api-key': apiKey,
                  'anthropic-version': '2023-06-01',
                  'Content-Length': Buffer.byteLength(data)
                }
              };
              
              const req = https.request(options, (res) => {
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                  try {
                    const result = JSON.parse(body);
                    if (result.content && result.content[0]) {
                      resolve(result.content[0].text);
                    } else if (result.error) {
                      reject(new Error(`Claude API error: ${result.error.message}`));
                    } else {
                      reject(new Error('Invalid Claude API response'));
                    }
                  } catch (e) {
                    reject(new Error(`Parse error: ${e.message}`));
                  }
                });
              });
              
              req.on('error', reject);
              req.write(data);
              req.end();
            });
          }
          
          async function postComment(prNumber, repoName, comment) {
            return new Promise((resolve, reject) => {
              if (!prNumber || !repoName || !process.env.GITHUB_TOKEN) {
                console.log('Missing required parameters for posting comment');
                console.log(`PR: ${prNumber}, Repo: ${repoName}, Token: ${process.env.GITHUB_TOKEN ? 'present' : 'missing'}`);
                resolve();
                return;
              }
              
              const data = JSON.stringify({ body: comment });
              
              const options = {
                hostname: 'api.github.com',
                path: `/repos/${repoName}/issues/${prNumber}/comments`,
                method: 'POST',
                headers: {
                  'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                  'Accept': 'application/vnd.github.v3+json',
                  'User-Agent': 'Go-AI-Code-Review-Action',
                  'Content-Type': 'application/json',
                  'Content-Length': Buffer.byteLength(data)
                }
              };
              
              console.log(`Posting comment to: ${options.hostname}${options.path}`);
              
              const req = https.request(options, (res) => {
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    console.log('Comment posted successfully');
                    resolve();
                  } else {
                    console.error(`GitHub API error: ${res.statusCode} - ${body}`);
                    resolve();
                  }
                });
              });
              
              req.on('error', (error) => {
                console.error('Request error:', error.message);
                resolve();
              });
              
              req.write(data);
              req.end();
            });
          }
          
          analyzeGoWithClaude().catch(console.error);
          EOF

      - name: Run Claude Go analysis
        if: steps.changed_files.outputs.any_changed == 'true'
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_FULL_NAME: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node analyze-claude-go.js "${{ steps.changed_files.outputs.all_changed_files }}"

  go_lint_and_test:
    name: Go Lint and Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  summary:
    name: Go Review Summary
    runs-on: ubuntu-latest
    needs: [gemini_go_review, claude_go_review, go_lint_and_test]
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: Post completion summary
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            
            if (!prNumber) {
              console.log('No PR number found, skipping summary');
              return;
            }
            
            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              });
              
              const aiComments = comments.filter(comment => 
                comment.body.includes('🐹 Gemini Go Code Review') || 
                comment.body.includes('🧠 Claude Go Code Review')
              );
              
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha,
              });
              
              const lintStatus = checkRuns.check_runs.find(run => 
                run.name.includes('golangci-lint') || run.name.includes('Go Lint')
              )?.conclusion || 'unknown';
              
              const testStatus = checkRuns.check_runs.find(run => 
                run.name.includes('test') || run.name.includes('Test')
              )?.conclusion || 'unknown';
              
              if (aiComments.length > 0) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `## ✅ Go AI Code Review Complete

This Go pull request has been automatically reviewed by AI assistants.

📊 **Review Summary:**
- ${aiComments.length} AI review(s) completed
- Linting status: ${lintStatus === 'success' ? '✅ Passed' : lintStatus === 'failure' ? '❌ Failed' : '⏳ Pending'}
- Test status: ${testStatus === 'success' ? '✅ Passed' : testStatus === 'failure' ? '❌ Failed' : '⏳ Pending'}

🐹 **Go-Specific Checks:**
- Idiomatic Go patterns reviewed
- Concurrency and error handling analyzed
- Performance and security considerations evaluated
- Testing patterns and coverage assessed

*AI reviews are complementary to human code review and should not replace thorough manual review.*`
                });
                console.log(`Go summary posted successfully for PR #${prNumber}`);
              } else {
                console.log('No AI comments found to summarize');
              }
            } catch (error) {
              console.error('Error posting summary:', error.message);
            }