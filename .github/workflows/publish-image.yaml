name: Publish Docker Image to Google Cloud Registry
run-name: publish-image

on:
  push:
    branches:
      - "*"
      # - "develop"
    # paths:
    #   - '**.go'
  # pull_request:

env:
  # CLOUD_RUN_REGION: ${{ secrets.CLOUD_RUN_REGION }}
  # GAR_LOCATION: us-central1
  env_vars: ${{ vars.production }}
  SERVICE: dashfin-backend-app
  REGION: us-central1
  REPOSITORY: cloud-run-source-deploy/dashfin-backend-app

  # Base names for services and secrets - User needs to set these in GitHub Secrets
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }} 
  CLOUD_RUN_REGION: ${{ vars.CLOUD_RUN_REGION }}
  
  # Base names for services and secrets - User needs to set these in GitHub Secrets
  CLOUD_RUN_SERVICE_NAME_BASE: ${{ vars.CLOUD_RUN_SERVICE_NAME_BASE }} 
  SECRET_NAME_IN_MANAGER_BASE: ${{ vars.SECRET_NAME_IN_MANAGER_BASE }}
  ENV_VAR_NAME_FOR_SECRET_IN_RUN_BASE: ${{ vars.ENV_VAR_NAME_FOR_SECRET_IN_RUN_BASE }}
  API: ${{ vars.CLAUDE_API_KEY }}
  MY_VAR: ${{ vars.MY_VAR }} 
  production: ${{ vars.production }} 

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write

    env: 
      FINAL_CLOUD_RUN_SERVICE_NAME: ''
      FINAL_SECRET_NAME_IN_MANAGER: ''
      FINAL_ENV_VAR_NAME_FOR_SECRET_IN_RUN: ''
      ACTUAL_SECRET_VALUE: ''
      IMAGE_TAG_SUFFIX: ''
      ENVIRONMENT_NAME: ''

    steps:
      - name: Imprimir variáveis do ambiente
        run: |
          echo "Variável 1 do ambiente: ${{ vars.NOME_DA_PRIMEIRA_VARIAVEL }}"
          echo "Variável 2 do ambiente: ${{ vars.NOME_DA_SEGUNDA_VARIAVEL }}"
          echo "Variável API: ${{ env.API }}"
          echo "Variável CLAUDE_API_KEY: ${{ vars.CLAUDE_API_KEY }}"
        env:
          # Se você precisar que as variáveis do ambiente sejam acessíveis como variáveis de ambiente shell
          # você pode mapeá-las explicitamente aqui.
          MINHA_VAR_AMBIENTE_1: ${{ vars.ENV_VAR_NAME_FOR_SECRET_IN_RUN_BASE }}
          MINHA_VAR_AMBIENTE_2: ${{ vars.MY_VAR }}
      - name: Determine Environment and Set Variables
        run: |
          if [ "${{ github.ref_name }}" == "develop" ]; then
            echo "ENVIRONMENT_NAME=develop" >> $GITHUB_ENV
            echo "FINAL_CLOUD_RUN_SERVICE_NAME=${{ env.CLOUD_RUN_SERVICE_NAME_BASE }}-dev" >> $GITHUB_ENV
            echo "FINAL_SECRET_NAME_IN_MANAGER=${{ env.SECRET_NAME_IN_MANAGER_BASE }}_DEV" >> $GITHUB_ENV
            echo "FINAL_ENV_VAR_NAME_FOR_SECRET_IN_RUN=${{ env.ENV_VAR_NAME_FOR_SECRET_IN_RUN_BASE }}_DEV" >> $GITHUB_ENV
            echo "ACTUAL_SECRET_VALUE=${{ secrets.SECRET_VALUE_DEVELOP }}" >> $GITHUB_ENV
            echo "IMAGE_TAG_SUFFIX=-dev" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "jules_wip_13387545001984943234" ]; then
            echo "ENVIRONMENT_NAME=production" >> $GITHUB_ENV
            echo "FINAL_CLOUD_RUN_SERVICE_NAME=${{ env.CLOUD_RUN_SERVICE_NAME_BASE }}" >> $GITHUB_ENV
            echo "FINAL_SECRET_NAME_IN_MANAGER=${{ env.SECRET_NAME_IN_MANAGER_BASE }}" >> $GITHUB_ENV
            echo "FINAL_ENV_VAR_NAME_FOR_SECRET_IN_RUN=${{ env.ENV_VAR_NAME_FOR_SECRET_IN_RUN_BASE }}" >> $GITHUB_ENV
            echo "ACTUAL_SECRET_VALUE=${{ secrets.SECRET_VALUE_MAIN }}" >> $GITHUB_ENV
            echo "TESTE1=${{ env.ENV_VAR_NAME_FOR_SECRET_IN_RUN_BASE }}" >> $GITHUB_ENV
            echo "ENVVVARSV=${{ env.env_vars }}" >> $GITHUB_ENV
            echo "MY_VAR=${{ env.MY_VAR }}" >> $GITHUB_ENV
            echo "my_env=${{ env.production }}" >> $GITHUB_ENV
            echo "IMAGE_TAG_SUFFIX=" >> $GITHUB_ENV # Or -prod / -main if desired
          else
            echo "Unsupported branch: ${{ github.ref_name }}. Exiting."
            exit 0
          fi
          echo "--------------------------------------------------"
          echo "Deploying for environment: $ENVIRONMENT_NAME"
          echo "Cloud Run Service Name: $FINAL_CLOUD_RUN_SERVICE_NAME"
          echo "Secret Name in Manager: $FINAL_SECRET_NAME_IN_MANAGER"
          echo "Env Var for Secret in Run: $FINAL_ENV_VAR_NAME_FOR_SECRET_IN_RUN"
          echo "Image Tag Suffix: $IMAGE_TAG_SUFFIX"
          echo "THSOT: $TESTE1"
          echo "MY_VAR: $MY_VAR"
          echo "my_env: $my_env"
          echo "ENVVVARSV: $ENVVVARSV"
          echo "--------------------------------------------------"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up GCloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build Docker image
        env:
          IMAGE_NAME: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.FINAL_CLOUD_RUN_SERVICE_NAME }}:${{ github.sha }}
        run: |
          echo "Building Docker image: $IMAGE_NAME"
          docker build -t $IMAGE_NAME -f Dockerfile .

      - name: Push Docker image to Artifact Registry
        env:
          IMAGE_NAME: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.FINAL_CLOUD_RUN_SERVICE_NAME }}:${{ github.sha }}
        run: |
          echo "Pushing Docker image: $IMAGE_NAME"
          docker push $IMAGE_NAME

      # - name: Print 
      #   run: |-
      #     echo  "${{ env.GAR_LOCATION }}-docker.pkg.dev/prospere-app/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" 
      #     echo us-central1-docker.pkg.dev/prospere-app/cloud-run-source-deploy/dashfin-backend-app/dashfin-backend-app@sha256:58679c0d14102df150e08bbbc018588342b7a09b27b7aa4df5c656ad9c0c1b94

      # - name: Build and Push Container
      #   run: |-
      #     docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/prospere-app/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./
      #     docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/prospere-app/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
          
      #     # Also tag as latest if pushing to main
      #     if [ "${{ github.ref }}" = "refs/heads/main" ]; then
      #       docker tag "${{ env.GAR_LOCATION }}-docker.pkg.dev/prospere-app/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" "${{ env.GAR_LOCATION }}-docker.pkg.dev/prospere-app/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest"
      #       docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/prospere-app/${{ env.REPOSITORY }}/${{ env.SERVICE }}:latest"
      #     fi
